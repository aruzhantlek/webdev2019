Metadata-Version: 2.1
Name: task
Version: 2019.3.23
Summary: task management based on python classes and django models
Home-page: https://github.com/looking-for-a-job/task.py
License: UNKNOWN
Keywords: task todo
Platform: UNKNOWN
Classifier: Framework :: Django
Classifier: License :: Public Domain
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Software Development
Description-Content-Type: text/markdown
Requires-Dist: Django (>1.0)
Requires-Dist: django-class
Requires-Dist: django-datetime-elapsed-field
Requires-Dist: public
Requires-Dist: setuptools

<!--
https://pypi.org/project/readme-generator/
-->

[![](https://img.shields.io/pypi/pyversions/task.svg?longCache=True)](https://pypi.org/project/task/)

#### Installation
```bash
$ [sudo] pip install task
```

#### Benefits
+   **no manual edit**. only classes and scripts!
+   **dynamic tasks state**
+   **custom task actions** (scripts, [apps](https://pypi.org/project/mac-app-generator/), notifications, etc)
+   **standalone django models usage**

#### How it works
```bash
site-packages/django_settings.py  # export DJANGO_SETTINGS_MODULE="django_settings"
site-packages/task_<name>.py
```

`task_<name>.py`
```python
from task.classes import Task

class Name(Task):
    def todo(self):
        return True if ... else False

    def run(self):
        ...
```

#### `settings.py`
```python
INSTALLED_APPS = [
    "task",
]
```

#### Classes
class|`__doc__`
-|-
`task.classes.Task` |base class for a Task model. attrs: `name`, `category`, `description`, `disabled`. methods: `complete()`, `update()`. properties: `completed_at`. not implemented: `todo()`, ...
`task.models.Category` |fields: `name`, `disabled`, `parent` (optional). methods: `getclass()`
`task.models.Task` |fields: `module_name`, `class_name`, `name`, `todo`, `disabled`, `completed_at`, `reminded_at`, `category` (optional). methods: `getclass()`

#### Functions
function|`__doc__`
-|-
`task.getmodules()` |return a list of `task_*` module objects
`task.classes.getclasses()` |return a list of Task subclasses
`task.classes.update()` |create/update all tasks

#### CLI
usage|`__doc__`
-|-
`python -m task.update` |create/update all tasks

#### Examples
```python
import task.setup
from task.classes import Task

class Stand_up(Task):
    def todo(self):
        return not self.completed_at or self.completed_at.elapsed.minutes >= 30

    def run(self):
        ...
        self.complete()
```

#### What's Next?
create services (cron, launchd, etc) with notifications, Desktop widgets, applications, web interface

#### Related projects
+   [mac-task.py - macOS applications generator for `task.py`](https://pypi.org/project/mac-task/)

<p align="center">
    <a href="https://pypi.org/project/readme-generator/">readme-generator</a>
</p>

